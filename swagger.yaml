openapi: 3.0.3
info:
  title: Swagger Booking Ticket
  description: good very good
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: event
    description: Operations about event
  - name: user
    description: Operations about user
paths:
  /event:
    post:
      tags:
        - event
      summary: Create ticket
      operationId: createticket
      requestBody:
        description: Created ticket object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [Admin]
    get:
      tags:
        - event
      summary: Get event by name
      description: ''
      operationId: getTicketByevent
      parameters:
        - name: event
          in: path
          description: 'The event that needs to be fetched. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [User]
    put:
      tags:
        - event
      summary: Update event
      operationId: updateTicket
      parameters:
        - name: ticket
          in: path
          description: ticket that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent ticket
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [Admin]
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Get event by event id
      description: ''
      operationId: getTicketByid
      parameters:
        - name: ticketId
          in: path
          description: 'A ticket that needs to be fetched. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [User]

    delete:
      tags:
        - event
      summary: Delete event
      description: This can only be done by the logged in user.
      operationId: deleteTicket
      parameters:
        - name: ticketId
          in: path
          description: A ticket that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [Admin]
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      security:
        - ticket_auth: [Admin]
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - ticket_auth: [Admin]
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - ticket_auth: [Admin]
  /user/{username}/tickets:
    get:
      tags:
        - user
      summary: Get tickets by user name
      description: 'This can only be done by the logged in user.'
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '404':
          description: User not found
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTickets'
      security:
        - ticket_auth: [Admin]
  /ticket:
    post:
      tags:
        - ticketactions
      summary: actions with a ticket
      operationId: actionsticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTicket'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [Admin]
  /updateTicket/{Id}:
    put:
      tags:
        - ticketactions
      summary: update a ticket status
      operationId: updateticketstatus
      parameters:
        - name: ticketid
          in: path
          description: ticket that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [Admin]
  /cancelTicket/{Id}:
    delete:
      tags:
        - ticketactions
      summary: cancel a reservation
      operationId: cancelbookticket
      parameters:
        - name: Id
          in: path
          description: --------------
          required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Unauthorized
        '404':
          description: Not found
      security:
        - ticket_auth: [Admin]
components:
  schemas:
    Ticket:
      required:
        - id
        - event
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        eventName:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        event:
          type: string

      xml:
        name: ticket
    User:
      required:
        - id
        - username
        - email
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        role:
          enum:
            - admin
            - user
          example:
            - admin
      xml:
        name: user
    UserTicket:
      required:
        - Userid
        - TicketId
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        Userid:
          type: integer
          format: int64
          example: 10
        TicketId:
          type: integer
          format: int64
          example: 10
        status:
          type: string
          enum:
            - expired
            - buyed
            - bought
          example:
            - booked
            - bought
            - expired
    ArrayOfTickets:
      type: array
      items:
        $ref: '#/components/schemas/UserTicket'
  securitySchemes:
    ticket_auth:
      type: http
      scheme: bearer

    api_key:
      type: apiKey
      name: api_key
      in: header